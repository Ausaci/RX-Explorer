# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true
  branches:
    include:
      - master

variables:
  - group: UWP-PipeLineVariable
  - name: BuildProject
    value: 'Package'
  - name: Solution
    value: '**/*.sln'
  - name: BuildPlatform
    value: 'x64|ARM64'
  - name: BuildConfiguration
    value: 'Release'
  - name: SideloadBuildPublishLocation
    value: '$(Build.ArtifactStagingDirectory)\Sideload\\'
  - name: CIBuildPublishLocation
    value: '$(Build.ArtifactStagingDirectory)\CI\\'
  - name: TempDirectory
    value: '$(Agent.TempDirectory)'
  - name: TargetWindowsSDKVersion
    value: '10.0.22000.0'
  - name: TargetWindowsSDKInstallerUrl # Windows SDK 10.22000.194
    value: 'https://download.microsoft.com/download/d/8/f/d8ff148b-450c-40b3-aeed-2a3944e66bbd/windowssdk/winsdksetup.exe'
  - name: WindowsSDKBaseLocation
    value: '$(Agent.TempDirectory)\WinSDK'
  - name: WindowsSDKInstallerLocation
    value: '$(Agent.TempDirectory)\WinSDK\winsdksetup.exe'

jobs:
  - job: CIBuild
    displayName: 'Build CI Application'
    timeoutInMinutes: 0
    pool:
      vmImage: 'windows-latest'
    steps:
      # UseDotNet@2 task to install .Net 6 environment because Azure Pipeline would not prepare the SDK we needed.
      # Maybe we could remove this task once Azure Pipeline install .Net 6 SDK by default.
      - task: UseDotNet@2
        displayName: 'Install .Net 6 SDK'
        inputs:
          packageType: sdk
          installationPath: $(TempDirectory)
          version: 6.x

      # Detect if Windows SDK is installed as requirement. If not install the SDK as requirement
      - task: PowerShell@2
        displayName: 'Download And Install Latest Windows SDK As Requirement'
        inputs:
          targetType: 'inline'
          script: |
            try {
              $CurrentSDKVersion = $(Get-Item "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0").GetValue("ProductVersion")
            } catch {
              $CurrentSDKVersion = ''
              Write-Host "Detect the installed Windows SDK failed. Installed Windows SDK Version is aligned with TargetSDKVersion. Skipping this check"
            }

            if ($CurrentSDKVersion -ne '') {
              if($CurrentSDKVersion -lt ($TargetWindowsSDKVersion)) {
                New-Item -Path $(WindowsSDKBaseLocation) -ItemType Directory

                Write-Host "Start downloading Windows SDK Installer using BitsTransfer..."

                Start-BitsTransfer -Source $(TargetWindowsSDKInstallerUrl) -Destination $(WindowsSDKInstallerLocation) -Description "Downloading Windows SDK..."

                Write-Host "Windows SDK Installer download completed"
                Write-Host "Start installing Windows SDK..."

                Start-Process $(WindowsSDKInstallerLocation) -ArgumentList "/q" -Wait

                Write-Host "Windows SDK installed completed"
              } else {
                Write-Host "Windows SDK meet the requeirement, skipping this task and no need to install the SDK"
              }
            }

      - task: DownloadSecureFile@1
        name: secureFile
        displayName: 'Download Publish Certificate'
        inputs:
          secureFile: '$(signingCert.secureFileName)'

      - task: PowerShell@2
        displayName: 'Import Publish Certificate File'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Start importing the certificate file"

            Add-Type -AssemblyName System.Security
            $Cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
            $Cert.Import('$(secureFile.secureFilePath)', '$(signingCert.password)', [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet)
            $Store = New-Object System.Security.Cryptography.X509Certificates.X509Store -ArgumentList "MY", CurrentUser
            $Store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
            $Store.Add($Cert)
            $Store.Close()

            Write-Host "Certificate file was imported successfully"

      - task: PowerShell@2
        displayName: 'Add AppCenter Secret Value'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Start adding AppCenter Secret Value."

            $AppCenterSecret = '$(appCenter.secret)'
            $TargetPath = '$(Build.SourcesDirectory)\RX_Explorer\View\ExtendedSplash.xaml.cs'
            $TargetContent = Get-Content -Path $TargetPath
            $TargetContent -Replace '<RX-Explorer-AppCenter-Secret-Value>', $AppCenterSecret | Set-Content -Path $TargetPath -Encoding utf8BOM

            Write-Host "AppCenter Secret Value was added successfully"

      - task: NuGetToolInstaller@1
        displayName: 'Install Nuget ToolSet'

      - task: NuGetCommand@2
        displayName: 'Restore Nuget Packages On Solution'
        inputs:
          restoreSolution: '$(Solution)'

      - task: VSBuild@1
        displayName: 'Build RX-Explorer Project'
        inputs:
          solution: '$(Solution)'
          msbuildArgs: '/t:$(BuildProject):Rebuild /p:PreferredToolArchitecture="x64" /p:AppxBundlePlatforms="$(BuildPlatform)" /p:AppxPackageDir="$(CIBuildPublishLocation)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=CI /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" /p:PackageCertificateKeyFile="$(secureFile.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
          configuration: '$(BuildConfiguration)'
          clean: true
          msbuildArchitecture: 'x64'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish And Upload Artifact'
        inputs:
          ArtifactName: 'CIBuild'
          PathtoPublish: '$(CIBuildPublishLocation)'

  - job: SideLoadBuild
    displayName: 'Build Sideload Application'
    timeoutInMinutes: 0
    pool:
      vmImage: 'windows-latest'
    steps:
      # UseDotNet@2 task to install .Net 6 environment because Azure Pipeline would not prepare the SDK we needed.
      # Maybe we could remove this task once Azure Pipeline install .Net 6 SDK by default.
      - task: UseDotNet@2
        displayName: 'Install .Net 6 SDK'
        inputs:
          packageType: sdk
          installationPath: $(TempDirectory)
          version: 6.x

      # Detect if Windows SDK is installed as requirement. If not install the SDK as requirement
      - task: PowerShell@2
        displayName: 'Download And Install Latest Windows SDK As Requirement'
        inputs:
          targetType: 'inline'
          script: |
            try {
              $CurrentSDKVersion = $(Get-Item "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Microsoft SDKs\Windows\v10.0").GetValue("ProductVersion")
            } catch {
              $CurrentSDKVersion = ''
              Write-Host "Detect the installed Windows SDK failed. Installed Windows SDK Version is aligned with TargetSDKVersion. Skipping this check"
            }

            if ($CurrentSDKVersion -ne '') {
              if($CurrentSDKVersion -lt ($TargetWindowsSDKVersion)) {
                New-Item -Path $(WindowsSDKBaseLocation) -ItemType Directory

                Write-Host "Start downloading Windows SDK Installer using BitsTransfer..."

                Start-BitsTransfer -Source $(TargetWindowsSDKInstallerUrl) -Destination $(WindowsSDKInstallerLocation) -Description "Downloading Windows SDK..."

                Write-Host "Windows SDK Installer download completed"
                Write-Host "Start installing Windows SDK..."

                Start-Process $(WindowsSDKInstallerLocation) -ArgumentList "/q" -Wait

                Write-Host "Windows SDK installed completed"
              } else {
                Write-Host "Windows SDK meet the requeirement, skipping this task and no need to install the SDK"
              }
            }

      - task: DownloadSecureFile@1
        name: secureFile
        displayName: 'Download Publish Certificate'
        inputs:
          secureFile: '$(signingCert.secureFileName)'

      - task: PowerShell@2
        displayName: 'Import Publish Certificate File'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Start importing the certificate file"

            Add-Type -AssemblyName System.Security
            $Cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
            $Cert.Import('$(secureFile.secureFilePath)', '$(signingCert.password)', [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet)
            $Store = New-Object System.Security.Cryptography.X509Certificates.X509Store -ArgumentList "MY", CurrentUser
            $Store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
            $Store.Add($Cert)
            $Store.Close()

            Write-Host "Certificate file was imported successfully"

      - task: PowerShell@2
        displayName: 'Add AppCenter Secret Value'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Start adding AppCenter Secret Value."

            $AppCenterSecret = '$(appCenter.secret)'
            $TargetPath = '$(Build.SourcesDirectory)\RX_Explorer\View\ExtendedSplash.xaml.cs'
            $TargetContent = Get-Content -Path $TargetPath
            $TargetContent -Replace '<RX-Explorer-AppCenter-Secret-Value>', $AppCenterSecret | Set-Content -Path $TargetPath -Encoding utf8BOM

            Write-Host "AppCenter Secret Value was added successfully"

      - task: NuGetToolInstaller@1
        displayName: 'Install Nuget ToolSet'

      - task: NuGetCommand@2
        displayName: 'Restore Nuget Packages On Solution'
        inputs:
          restoreSolution: '$(Solution)'

      - task: VSBuild@1
        displayName: 'Build RX-Explorer Project'
        inputs:
          solution: '$(Solution)'
          msbuildArgs: '/t:$(BuildProject):Rebuild /p:PreferredToolArchitecture="x64" /p:AppxBundlePlatforms="$(BuildPlatform)" /p:AppxPackageDir="$(SideloadBuildPublishLocation)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" /p:PackageCertificateKeyFile="$(secureFile.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
          configuration: '$(BuildConfiguration)'
          clean: true
          msbuildArchitecture: 'x64'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish And Upload Artifact'
        inputs:
          ArtifactName: 'SideloadBuild'
          PathtoPublish: '$(SideloadBuildPublishLocation)'
